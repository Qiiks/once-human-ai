version: '3.8'

# Production-ready docker-compose file for Coolify deployment
# Merges base configuration with production overrides

services:
  rag-service:
    build:
      context: .
      dockerfile: rag_pipeline/Dockerfile
    container_name: once-human-rag
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      # Tier 1: Core Service Configuration (Production)
      - SERVICE_NAME=rag-service
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      
      # Service Binding (Production)
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      
      # Tier 3: Infrastructure Configuration
      - CHROMA_DB_PATH=/data/chroma_db
      - SENTENCE_TRANSFORMERS_HOME=/app/model_cache
      - DATABASE_PATH=/data/memory.db
      
      # Logging and monitoring (Production)
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      
      # Production service discovery settings
      - SERVICE_DISCOVERY_TIMEOUT=10000
      - SERVICE_DISCOVERY_RETRIES=5
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=3
      - CIRCUIT_BREAKER_TIMEOUT=30000
      
      # Production health check configuration
      - HEALTH_CHECK_INTERVAL=15s
      - METRICS_ENABLED=true
    volumes:
      - chroma_db:/data/chroma_db
      - sqlite_db:/data
      - model_cache:/app/model_cache
    networks:
      app-network:
        aliases:
          - rag-service
          - rag-api
          - vector-db-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "
        import requests, sys;
        try:
          r = requests.get('http://127.0.0.1:5000/health', timeout=10);
          if r.status_code == 200:
            health_data = r.json();
            sys.exit(0 if health_data.get('status') == 'healthy' else 1)
          else:
            sys.exit(1)
        except Exception as e:
          print(f'Health check failed: {e}');
          sys.exit(1)
      "]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s  # Allow extra time for model loading and ChromaDB initialization
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=rag-service,app=once-human-bot"
    labels:
      - "coolify.managed=true"
      - "coolify.service=rag-service"
      - "coolify.app=once-human-bot"
      - "coolify.port=5000"
      - "coolify.protocol=http"
      - "coolify.healthcheck.enabled=true"
      - "coolify.healthcheck.path=/health"
      - "coolify.healthcheck.interval=30s"
      - "coolify.healthcheck.timeout=10s"
      - "coolify.healthcheck.retries=3"
      - "traefik.enable=true"  # Enable external access through reverse proxy
      - "traefik.http.routers.rag-service.rule=PathPrefix(`/rag`)"
      - "traefik.http.routers.rag-service.entrypoints=web,websecure"
      - "traefik.http.services.rag-service.loadbalancer.server.port=5000"

  discord-bot:
    build:
      context: .
      dockerfile: once-human-bot/Dockerfile
    container_name: once-human-bot
    env_file:
      - .env
    environment:
      # Tier 1: Core Service Configuration (Production)
      - SERVICE_NAME=discord-bot
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=production
      - NODE_ENV=production
      
      # Tier 2: Service Discovery Configuration (Production)
      - RAG_SERVICE_URL=http://rag-service:5000
      - RAG_SERVICE_HEALTH_ENDPOINT=/health
      - RAG_SERVICE_TIMEOUT=30000
      
      # Fallback configuration
      - RAG_SERVICE_FALLBACK_URLS=http://localhost:5000,http://127.0.0.1:5000
      - RAG_SERVICE_DISCOVERY_STRATEGY=dns-first
      
      # Production circuit breaker configuration
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=3
      - CIRCUIT_BREAKER_TIMEOUT=30000
      - CIRCUIT_BREAKER_RESET_TIMEOUT=180000
      
      # Production service discovery timeouts and retries
      - SERVICE_DISCOVERY_TIMEOUT=10000
      - SERVICE_DISCOVERY_RETRIES=5
      - SERVICE_DISCOVERY_BACKOFF=exponential
      
      # Tier 3: Infrastructure Configuration
      - DATABASE_PATH=/data/memory.db
      
      # Production network configuration
      - DOCKER_NETWORK_NAME=once-human-network
      - INTERNAL_NETWORK_ONLY=true
      - ENABLE_EXTERNAL_ACCESS=false
      
      # Logging and monitoring (Production)
      - LOG_LEVEL=info
      - HEALTH_CHECK_INTERVAL=15s
      - METRICS_ENABLED=true
      
      # Health check port (for internal health endpoint)
      - HEALTH_CHECK_PORT=3000
    volumes:
      - sqlite_db:/data
    networks:
      app-network:
        aliases:
          - discord-bot
          - bot-service
    depends_on:
      rag-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "
        const http = require('http');
        const options = {
          hostname: '127.0.0.1',
          port: process.env.HEALTH_CHECK_PORT || 3000,
          path: '/health',
          timeout: 10000
        };
        const req = http.request(options, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            try {
              const health = JSON.parse(data);
              process.exit(health.status === 'healthy' ? 0 : 1);
            } catch (e) {
              process.exit(res.statusCode === 200 ? 0 : 1);
            }
          });
        });
        req.on('error', (e) => {
          console.error('Health check error:', e.message);
          process.exit(1);
        });
        req.on('timeout', () => {
          console.error('Health check timeout');
          process.exit(1);
        });
        req.setTimeout(10000);
        req.end();
      "]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=discord-bot,app=once-human-bot"
    labels:
      - "coolify.managed=true"
      - "coolify.service=discord-bot"
      - "coolify.app=once-human-bot"
      - "coolify.healthcheck.enabled=true"
      - "coolify.healthcheck.path=/health"
      - "coolify.healthcheck.interval=30s"
      - "traefik.enable=false"  # No external access needed

volumes:
  chroma_db:
    driver: local
    name: once-human-chroma-db
    labels:
      - "coolify.backup=true"
      - "coolify.backup.frequency=daily"
  sqlite_db:
    driver: local
    name: once-human-sqlite-db
    labels:
      - "coolify.backup=true"
      - "coolify.backup.frequency=daily"
  model_cache:
    driver: local
    name: once-human-model-cache
    labels:
      - "coolify.backup=false"  # Model cache can be regenerated

networks:
  app-network:
    driver: bridge
    name: once-human-network
    internal: false  # Allow Coolify reverse proxy access
    labels:
      - "coolify.managed=true"
      - "coolify.network=internal"
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1